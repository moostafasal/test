//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
model User {
  id               String            @id() @default(uuid())
  name             String?
  email            String?           @unique()
  pictureUrl       String?
  stripeCustomerId String?
  /// @password
  /// @omit
  password         String?
  dateCreated      DateTime          @default(now())
  dateUpdated      DateTime          @default(now()) @updatedAt()
  accounts         Account[]
  sessions         Session[]
  roles            Role[]
  bookings         Booking[]         @relation("user")
  customerSupports CustomerSupport[] @relation("user")
  admins           Admin[]           @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Booking {
  id          String    @id() @default(uuid())
  startDate   String?
  endDate     String?
  status      String?
  totalPrice  Float?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], name: "user")
  carId       String?
  car         Car?      @relation(fields: [carId], references: [id], name: "car")
  payments    Payment[] @relation("booking")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Car {
  id                 String    @id() @default(uuid())
  type               String?
  brand              String?
  model              String?
  pricePerDay        Float?
  availabilityStatus String?
  description        String?
  imageUrl           String?
  bookings           Booking[] @relation("car")
  dateCreated        DateTime  @default(now())
  dateUpdated        DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Payment {
  id                  String   @id() @default(uuid())
  amount              Float?
  paymentDate         String?
  paymentStatus       String?
  stripeTransactionId String?
  bookingId           String?
  booking             Booking? @relation(fields: [bookingId], references: [id], name: "booking")
  dateCreated         DateTime @default(now())
  dateUpdated         DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model CustomerSupport {
  id          String   @id() @default(uuid())
  message     String?
  response    String?
  status      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Admin {
  id          String   @id() @default(uuid())
  role        String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RentalTerms {
  id          String   @id() @default(uuid())
  content     String?
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}
